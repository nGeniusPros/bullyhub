import { createServerSupabaseClient } from '@/lib/supabase-server';
import { NextRequest, NextResponse } from 'next/server';

export async function GET(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const supabase = await createServerSupabaseClient();
    
    // Get the current user
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    if (userError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    // Get the DNA test with its related data
    const { data: dnaTest, error: dnaTestError } = await supabase
      .from('dna_test_results')
      .select(`
        *,
        dog:dogs(id, name, breed, color, owner_id),
        genetic_markers(*),
        health_markers(*)
      `)
      .eq('id', params.id)
      .single();
    
    if (dnaTestError) {
      return NextResponse.json({ error: 'DNA test not found' }, { status: 404 });
    }
    
    // Verify that the dog belongs to the user
    if (dnaTest.dog.owner_id !== user.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }
    
    // Format the response
    const formattedTest = {
      id: dnaTest.id,
      dogId: dnaTest.dog_id,
      dogName: dnaTest.dog.name,
      dogBreed: dnaTest.dog.breed,
      dogColor: dnaTest.dog.color,
      provider: dnaTest.provider,
      testDate: dnaTest.test_date,
      markers: dnaTest.genetic_markers.map((marker: any) => ({
        locus: marker.locus,
        alleles: marker.alleles,
        description: marker.description
      })),
      healthMarkers: dnaTest.health_markers.map((marker: any) => ({
        condition: marker.condition,
        status: marker.status
      })),
      createdAt: dnaTest.created_at
    };
    
    return NextResponse.json(formattedTest);
  } catch (error) {
    console.error('Error fetching DNA test:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

export async function DELETE(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const supabase = await createServerSupabaseClient();
    
    // Get the current user
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    if (userError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    // Get the DNA test to verify ownership
    const { data: dnaTest, error: dnaTestError } = await supabase
      .from('dna_test_results')
      .select(`
        dog_id,
        dog:dogs(owner_id)
      `)
      .eq('id', params.id)
      .single();
    
    if (dnaTestError) {
      return NextResponse.json({ error: 'DNA test not found' }, { status: 404 });
    }
    
    // Verify that the dog belongs to the user
    if (dnaTest.dog.owner_id !== user.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }
    
    // Delete the DNA test (cascade will delete related markers)
    const { error: deleteError } = await supabase
      .from('dna_test_results')
      .delete()
      .eq('id', params.id);
    
    if (deleteError) {
      return NextResponse.json({ error: 'Failed to delete DNA test' }, { status: 500 });
    }
    
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error deleting DNA test:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}
