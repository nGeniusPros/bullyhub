import { createServerSupabaseClient } from '@/lib/supabase-server';
import { NextRequest, NextResponse } from 'next/server';

export async function GET(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const supabase = await createServerSupabaseClient();
    
    // Get the current user
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    if (userError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    // Get the dog to verify ownership
    const { data: dog, error: dogError } = await supabase
      .from('dogs')
      .select('*, owner_id')
      .eq('id', params.id)
      .single();
    
    if (dogError) {
      return NextResponse.json({ error: 'Dog not found' }, { status: 404 });
    }
    
    // Verify that the dog belongs to the user
    if (dog.owner_id !== user.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }
    
    // For now, return mock pedigree data
    // In a real implementation, you would fetch the actual pedigree data from the database
    const mockPedigree = {
      dog: {
        id: dog.id,
        name: dog.name,
        breed: dog.breed,
        color: dog.color,
        dateOfBirth: dog.date_of_birth,
        registrationNumber: 'REG123456',
        image: null
      },
      sire: {
        id: 'sire-1',
        name: 'Max Senior',
        breed: dog.breed,
        color: 'Brindle',
        dateOfBirth: '2018-05-10',
        registrationNumber: 'REG789012',
        image: null,
        sire: {
          id: 'grandsire-1',
          name: 'Champion Rex',
          breed: dog.breed,
          color: 'Fawn',
          dateOfBirth: '2015-03-22',
          registrationNumber: 'REG345678',
          image: null
        },
        dam: {
          id: 'granddam-1',
          name: 'Lady Blue',
          breed: dog.breed,
          color: 'Blue',
          dateOfBirth: '2016-07-15',
          registrationNumber: 'REG901234',
          image: null
        }
      },
      dam: {
        id: 'dam-1',
        name: 'Luna',
        breed: dog.breed,
        color: 'Fawn',
        dateOfBirth: '2019-02-18',
        registrationNumber: 'REG567890',
        image: null,
        sire: {
          id: 'grandsire-2',
          name: 'Duke',
          breed: dog.breed,
          color: 'Brindle',
          dateOfBirth: '2016-11-05',
          registrationNumber: 'REG123789',
          image: null
        },
        dam: {
          id: 'granddam-2',
          name: 'Bella',
          breed: dog.breed,
          color: 'Fawn Pied',
          dateOfBirth: '2017-09-30',
          registrationNumber: 'REG456012',
          image: null
        }
      }
    };
    
    return NextResponse.json(mockPedigree);
  } catch (error) {
    console.error('Error fetching pedigree:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}
